import numpy as np

__all__ = ['dct2','idct2']

# D(変換行列)の定義
D = np.zeros((8,8))
for u in range(8):
    C = 1/(2*np.sqrt(2)) if u == 0 else 1/2
    for x in range(8):
        D[u][x] = C * np.cos(np.pi/16*u*(2*x+1))

def _dct(f):
    return np.hstack(list(map(lambda m:np.dot(m,np.transpose(D)),np.hsplit(f,range(8,f.shape[1],8)))))
    
def _idct(f):
    return np.hstack(list(map(lambda m:np.dot(m,D),np.hsplit(f,range(8,f.shape[1],8)))))

def dct2(f):
    '''
    画像を8x8のブロックごとに離散コサイン変換する.

    Parameters
    ----------
    f:幅と高さが8の倍数である画像を表す2次元配列. 8の倍数でない場合の動作は未定義.
    
    Returns
    -------
    `f`を8x8のブロックごとに離散コサイン変換したものを表す2次元配列を返す. `f`の値は変わらない.

    Examples
    --------
    >>> import numpy as np
    >>> a = np.arange(64).reshape((8,8))
    >>> a
    array([[ 0,  1,  2,  3,  4,  5,  6,  7],
           [ 8,  9, 10, 11, 12, 13, 14, 15],
           [16, 17, 18, 19, 20, 21, 22, 23],
           [24, 25, 26, 27, 28, 29, 30, 31],
           [32, 33, 34, 35, 36, 37, 38, 39],
           [40, 41, 42, 43, 44, 45, 46, 47],
           [48, 49, 50, 51, 52, 53, 54, 55],
           [56, 57, 58, 59, 60, 61, 62, 63]])
    >>> dct_image_transform.dct.dct2(a)
    array([[ 1.73461862e+02, -6.33931321e+01,  4.17405545e+01,
            -1.89941046e+01,  2.18018385e+01, -5.00402819e+00,
             1.17120681e+01,  3.75285835e+00],
           [-1.75952577e+02,  5.23785115e+01, -3.92019597e+01,
             1.49716247e+01, -2.09792871e+01,  2.82930360e+00,
            -1.19296045e+01, -4.86698787e+00],
           [ 7.13597334e+01, -2.29410878e+01,  1.63457422e+01,
            -6.68364998e+00,  8.67014014e+00, -1.46741583e+00,
             4.83116748e+00,  1.82286732e+00],
           [-5.95368282e+01,  1.74630332e+01, -1.31962399e+01,
             4.97220262e+00, -7.07395236e+00,  9.08325332e-01,
            -4.03768083e+00, -1.66997128e+00],
           [ 3.25208299e+01, -1.07494165e+01,  7.52674234e+00,
            -3.15200513e+00,  3.97929098e+00, -7.24220360e-01,
             2.20049299e+00,  8.04556706e-01],
           [-2.62095719e+01,  7.33193712e+00, -5.71570381e+00,
             2.06075953e+00, -3.08025239e+00,  3.32851819e-01,
            -1.77895867e+00, -7.66789300e-01],
           [ 1.12461139e+01, -4.15935376e+00,  2.71916996e+00,
            -1.24923204e+00,  1.41818723e+00, -3.33727909e-01,
             7.59128277e-01,  2.38921375e-01],
           [-6.25482292e+00,  1.22563618e+00, -1.22611844e+00,
             3.03015972e-01, -6.85181175e-01, -1.93044114e-02,
            -4.26711881e-01, -2.29589869e-01]])
    '''
    return np.transpose(_dct(np.transpose(_dct(f))))

def idct2(f):
    '''
    画像を8x8のブロックごとに離散コサイン逆変換する.

    Parameters
    ----------
    f:幅と高さが8の倍数である画像を表す2次元配列. 8の倍数でない場合の動作は未定義.
    
    Returns
    -------
    `f`を8x8のブロックごとに離散コサイン逆変換したものを表す2次元配列を返す. `f`の値は変わらない.

    Examples
    --------
    >>> import numpy as np
    >>> a = np.arange(64).reshape((8,8))
    >>> a
    array([[ 0,  1,  2,  3,  4,  5,  6,  7],
           [ 8,  9, 10, 11, 12, 13, 14, 15],
           [16, 17, 18, 19, 20, 21, 22, 23],
           [24, 25, 26, 27, 28, 29, 30, 31],
           [32, 33, 34, 35, 36, 37, 38, 39],
           [40, 41, 42, 43, 44, 45, 46, 47],
           [48, 49, 50, 51, 52, 53, 54, 55],
           [56, 57, 58, 59, 60, 61, 62, 63]])
    >>> dct_image_transform.dct.idct2(a)
    array([[ 2.52000000e+02, -1.82216412e+01, -2.85756827e-14,
            -1.90481783e+00,  6.90840682e-15, -5.68239222e-01,
            -4.65532414e-14, -1.43407825e-01],
           [-1.45773129e+02, -4.88498131e-15,  1.70745277e-14,
            -9.99200722e-15, -2.95732321e-15, -4.04815070e-14,
             2.50507597e-14,  1.53904667e-14],
           [-4.26325641e-14, -2.66453526e-15, -7.08940385e-16,
             3.33066907e-15, -4.30195295e-15, -8.32667268e-17,
             2.71964738e-15,  1.86309301e-15],
           [-1.52385426e+01, -7.54951657e-15,  2.21371569e-15,
            -3.55271368e-15,  2.95988699e-15, -2.83106871e-15,
             2.26663512e-15, -5.79397641e-16],
           [-7.10542736e-15,  8.88178420e-15, -3.14018492e-16,
             6.93889390e-16, -1.88411095e-15,  1.47104551e-15,
            -3.92523115e-16,  2.07472928e-15],
           [-4.54591378e+00, -6.66133815e-15, -4.18584490e-15,
            -2.10942375e-15,  1.22239960e-15, -5.04457587e-15,
             1.28772632e-15, -8.32667268e-17],
           [-2.84217094e-14,  2.22044605e-15,  4.03245555e-15,
             2.60902411e-15,  1.10214492e-15,  2.44942955e-15,
             1.84753287e-15, -5.27355937e-16],
           [-1.14726260e+00,  9.99200722e-16, -1.40622244e-15,
            -1.15185639e-15, -1.22858912e-15,  3.43475248e-16,
            -1.54841012e-15, -2.54136989e-16]])
    '''
    return np.transpose(_idct(np.transpose(_idct(f))))